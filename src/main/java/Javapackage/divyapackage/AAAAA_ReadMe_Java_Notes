
Versions of Java ::

1.0
1.1
1.2
1.3
1.4
5.0
6.0
7.0
8.0 :: 1.8 :: 25 - 30
9.0
10.0
11.0
12.0

Editions ::

Java Micro Edition (Java ME): ...
Java Standard Edition (Java SE): ...
Java Enterprise Edition(Java EE): ...

Java Components ::

Java == jdk + jre

JDK == Java Development Kit ::

JRE == Java Runtime Environment ::

JRE = Java Compiler  +  JVM (Java Virtual Machine)

Java Compiler === Byte code of the code which can understandable by JVM



Download JDK and Install jdk ::

1. Go to google and type download jdk 1.8 and press enter
2. CLick on the first link ( https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html ).
3. Under Java SE Development Kit 8u201 Section Accept Lisence Agreement.
4. Click on link to download jdk with respect to your operating system operating system type ( if 64 bit type click on
    jdk-8u201-windows-x64-demos.zip link, if 32 bit type click on jdk-8u201-windows-i586-demos.zip link)
5. Goto downloads in your system and double click on jdk-8u201-windows-x... file it will start installation wizard.
    Keep on clicking next button in all wizards it gets install successfully.
6. Now go to C drive -> program files -> java -> jdk1.8.0_201 and copy this location.
7. Go to environment variables in your system and set JAVA_HOME and path.
8. Click OK in all windows.
9. Open command prompt and type javac and click enter, if you find java commands you can confirm that java installation is success.


	  Components of Java ::

	   java = jdk + jre

	  JDK :: Java Development Kit ::

	  JRE :: Java Runtime Environment ::

	  Jre = compiler + jvm (Java Virtual Machine :: byte code)

	  Data Types ::

	  1. byte :: 0,1 : 0 = 0000, 1 = 0001, 2 = 0010
	  2. short : 0-9;
	  3. int : 4bytes, 10, 0
	  4. long : 8bytes : 10L, 0L
	  5. float : 4bytes : 0.0f, 86.50f : 1000.50f
	  6. double : 8bytes : 0.0d, 8765.567d
	  7. boolean : true, false : false
	  8. char : 'a', \u0000


	  Variable :

	  temporary memory location to store a single value at a time.

	  datatype varname = value;

	  1. local variable ::
	  2. instance variable ::
	  3. static variable ::

	 Operators ::

	 1. Unary Operators
	 	1. Prefix unary operator :: pre-Increment(++expression), pre-decrement(--expression)
	 	2. Postfix Unary Operator :: post-Increment(expression++), post-decrement(expression--)

	 	==> 1

	 2. Arithmetic Operators :: +, -, *, /(Division = Quotient), %(Modulus = remainder)
	 3. Relational / Comparision :: <, <=, >, >=, ==, != :: boolean :: true, false
	 4. Bitwise
	 5. Logical
	 6. Assignment :: =


Conditional statements ::

1. if :: Only one condition
2. else if :: Multiple conditions
3. switch case :: Multiple conditions but depends on expression


Looping statements ::

a. For loop :: when knows number of iterations
b. While loop :: As long as condition is true
c. Do while loop :: Before checking the condition We want to execute a block of code atleast one time.

	 int i = 1; i <= 5; 	i++/i--

 for ( intialize; condition; incrm/decre ) {
	System.out.println();
 }

 int i = 0;

 while(i <= 5){
 System.out.println();
 i++;
 }

 continue;
 break;

Array :: Use to store multiple data but before storing data we have to declare the size.

==> On the basis of index.

==> Index of the first element 0.

Index of the last element is = number of elements in array - 1.

Syntax ::

datatype[] nameofarray = new datatype[size];

nameofarray[index] = data;

datatype[] nameofarray = {a,b,c,d,e,f};

for(datatype data : nameofarray) {
        System.out.println(data);
}

String Class :: Predefined class in java which is available in java.lang package.

String :: Sequence of chars / Combination of chars declared inside "".

In string all the chars are storing on the basis of index.

0 ==> Index of the first char.

Index of the last char is = number of chars in string - 1.

"Chandra"

"Java"

"2132121344325"

Ways to create a string ::

1. By using String literal :: String var = "Chandra";
2. By using new keyword :: String var = new String("Chandra");

Constructor :: Special type of method which is not having return type.

Name :: Same as name of the class.

Types::
	 1. Default ::
	 2. Parameterized ::

Inheritance ::	  extends

	 Types ::

	  1. Single
	  2. Multilevel
	  3. Hierarchical
	  4. multiple
	  5. Hybrid

Access Modifiers ::
1. private ::
2. default ::
3. protected ::
4. public ::


Abstraction :: Hiding implementation details and showing functionality to end user.

Abstract class :: not 100%

    Abstract methods :: method without body.
    Non-abstract methods :: method with body.

Interface :: 100%
    Abstract methods :: method without body.



Collection Framewrk ::

methods ::

add
size
clear
remove


1. List Interface ::
	i. ArrayList Class ::
	ii. LinkedList class ::

ListIterator :: hasPrevious(), hasNext(), previous(), next(), remove()

Iterator ::  hasNext(), next(), remove()

2. Set Interface ::
	i. HashSet class ::
	ii. LinkedHashSet class ::
	iii. TreeSet class ::

3. Map Interface :: key, value
	i. HashMap class              HashMap<key, value> map = new HashMap<>();
	ii. LinkedHashMap class
	ii. TreeMap class

firstname : chandra
lastname : chandra
dob : 20081988
designation ::
null :: djsdh


Map<keydatatype, valuedatatype> map = new HashMap<>();

HashMap<String, String> map = new HashMap<>();

HashMap<Integer, String> map = new HashMap<>();

HashMap<String, float> map = new HashMap<>();

HashMap<Integer, double> map = new HashMap<>();


Exception Handling ::

Exception ::

try, catch, finally

try {

} catch() {

}

throws

throw


Exception ::

NullPointerException
ArrayIndexOutOfBoundsException
StringIndexOutOfBoundsException









